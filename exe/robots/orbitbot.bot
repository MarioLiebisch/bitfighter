-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
--
-- OrbitBot, a simple robot that finds the nearest TestItem and orbits it
-- Note that this relies on line-of-sight navigation, so only good for open levels
--
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- Function main() is run once when the robot is initialized.  All variables
-- defined here will be available as globals throughout the script.  
-- This function is run first.
-------------------------------------------------------------------------------

function main()
   orbitRadius = 300
   orbitAng = 0
   isInOrbit = false
   targetItem = nil
end   

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- This is called by the robot's idle routine each tick.
-- This function must be present for the robot to work!
-------------------------------------------------------------------------------

function onTick(deltaT)

    if(targetItem == nil) then
        targetItem = findClosest(bot:findGlobalItems(ShipType))
    end

    if(targetItem == nil) then return end


    local botLoc = bot:getLoc()
    local itemLoc = targetItem:getLoc()

    local dist = botLoc:distanceTo( itemLoc )

    -- Here we use the getTime() function to make the motion look smooth.
    -- If we just advanced orbitAng by a fixed amount each frame, it would
    -- appear jerky, as each frame is a slightly different length.

    -- .0015 determined experimentally
    orbitAng = orbitAng + .0015 * bot:getTime()


    local dest

    if( dist <= orbitRadius * 1.1 ) then    -- Close enough to enter orbit
        dest = itemLoc
        dest:setxy( itemLoc:x() + orbitRadius * math.cos (orbitAng),
                    itemLoc:y() + orbitRadius * math.sin (orbitAng)  )
        if( not isInOrbit ) then
            orbitAng = botLoc:angleTo( dest ) - math.pi / 2
        end    
        
        isInOrbit = true
                    
    else                                    -- Travel directly toward object
        dest = itemLoc
        orbitAng = botLoc:angleTo( dest )
        isInOrbit = false
    end

    bot:setThrustToPt( dest )                  -- Travel towards calculated point
    bot:setAngle( botLoc:angleTo( itemLoc ) )  -- Aim ship that way too
end


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- This function is called once and should return the robot's name
-------------------------------------------------------------------------------

function getName()
    return( "OrbitBot" )
end

